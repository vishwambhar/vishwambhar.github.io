<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://0.0.0.0:4000/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2016-12-12T05:36:49+00:00</updated><id>http://0.0.0.0:4000//</id><title type="html">Tech Zone</title><subtitle>Learning learning &amp; re-learning</subtitle><entry><title type="html">Testing Out TensorFlow Environment</title><link href="http://0.0.0.0:4000/2016/12/11/testing-out-tensoflow-environment/" rel="alternate" type="text/html" title="Testing Out TensorFlow Environment" /><published>2016-12-11T20:40:00+00:00</published><updated>2016-12-11T20:40:00+00:00</updated><id>http://0.0.0.0:4000/2016/12/11/testing-out-tensoflow-environment</id><content type="html" xml:base="http://0.0.0.0:4000/2016/12/11/testing-out-tensoflow-environment/">&lt;p&gt;Automated driving sounds cool, so I'm too excited to learn something about the technologies involved in this space. And one of the first things I had to do was to learn &lt;a href=&quot;https://tensorflow.org&quot;&gt; TensorFlow.&lt;/a&gt; 
&lt;p&gt;
Here are the steps I used to install TensorFlow on macOS Sierra.
&lt;/p&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;ul type=&quot;disc&quot;&gt;
&lt;li&gt;Install &lt;a href=&quot;https://docs.continuum.io/anaconda/install&quot;&gt;Anaconda.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run the following steps to setup Anaconda environment:
&lt;!-- HTML generated using hilite.me --&gt;&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;conda create &lt;span style=&quot;color: #333333&quot;&gt;--&lt;/span&gt;name&lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt;IntroToTensorFlow python&lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;3&lt;/span&gt; anaconda
source activate IntroToTensorFlow
conda install &lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;c conda&lt;span style=&quot;color: #333333&quot;&gt;-&lt;/span&gt;forge tensorflow
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Run the following code in your favourate python code editor to make sure TensorFlow environment is working as expected:
&lt;!-- HTML generated using hilite.me --&gt;&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;tensorflow&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;as&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;tf&lt;/span&gt;
&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;numpy&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;as&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;np&lt;/span&gt;
&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;as&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;plt&lt;/span&gt;
&lt;span style=&quot;color: #333333&quot;&gt;%&lt;/span&gt;matplotlib inline

&lt;span style=&quot;color: #888888&quot;&gt;# 2x5 Tensor of randomally distributed numbers&lt;/span&gt;
normal &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; tf&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;random_normal([&lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;2&lt;/span&gt;, &lt;span style=&quot;color: #0000DD; font-weight: bold&quot;&gt;5&lt;/span&gt;], mean&lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #6600EE; font-weight: bold&quot;&gt;2.0&lt;/span&gt;, stddev&lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #6600EE; font-weight: bold&quot;&gt;4.0&lt;/span&gt;)
&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;with&lt;/span&gt; tf&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;Session() &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;as&lt;/span&gt; sess:
    out &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; sess&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;run(normal)
    &lt;span style=&quot;color: #007020&quot;&gt;print&lt;/span&gt;(out) &lt;span style=&quot;color: #888888&quot;&gt;# print the 2x5 matrix&lt;/span&gt;
    x, y &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; out &lt;span style=&quot;color: #888888&quot;&gt;# split up the 2x5 matrix into two 1x5 vectors, x and y&lt;/span&gt;
    plt&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;scatter(x, y) &lt;span style=&quot;color: #888888&quot;&gt;# create scatter plot with x and y&lt;/span&gt;
    plt&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;show() &lt;span style=&quot;color: #888888&quot;&gt;# show scatter plot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

You should see the scatter plot output something similar to this:

&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/testing_out_tensorflow_environment_pic1.png&quot; alt=&quot;Output&quot; /&gt;
&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;</content><author><name>vishwambharu@gmail.com</name></author><summary type="html">Automated driving sounds cool, so I'm too excited to learn something about the technologies involved in this space. And one of the first things I had to do was to learn  TensorFlow. 

Here are the steps I used to install TensorFlow on macOS Sierra.</summary></entry><entry><title type="html">Various ways to Iterate Java Map Entries</title><link href="http://0.0.0.0:4000/2016/05/08/various-ways-to-iterate-java-map-entries/" rel="alternate" type="text/html" title="Various ways to Iterate Java Map Entries" /><published>2016-05-08T12:10:00+00:00</published><updated>2016-05-08T12:10:00+00:00</updated><id>http://0.0.0.0:4000/2016/05/08/various-ways-to-iterate-java-map-entries</id><content type="html" xml:base="http://0.0.0.0:4000/2016/05/08/various-ways-to-iterate-java-map-entries/">&lt;h2 class=&quot;section-heading&quot;&gt;Iterating a Map using an Iterator&lt;/h2&gt;
&lt;!-- HTML generated using hilite.me --&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;package&lt;/span&gt; main&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;java&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;lessons&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;

&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;java.util.Iterator&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;java.util.Map&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;

&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #BB0066; font-weight: bold&quot;&gt;IterateMapEntries&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;{&lt;/span&gt;

    &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066BB; font-weight: bold&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;...&lt;/span&gt; args&lt;span style=&quot;color: #333333&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;{&lt;/span&gt;
        Map&lt;span style=&quot;color: #333333&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333&quot;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;new&lt;/span&gt; HashMap&lt;span style=&quot;color: #333333&quot;&gt;();&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;California&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Sacramento&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Texas&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Austin&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Florida&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Tallahassee&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Georgia&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Atlanta&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;

        &lt;span style=&quot;color: #888888&quot;&gt;/** 1. Iterating Map using an Iterator. **/&lt;/span&gt;
        Iterator iterator &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;entrySet&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;().&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;iterator&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;();&lt;/span&gt;
        &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;while&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;iterator&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;hasNext&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;{&lt;/span&gt;
            Map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;Entry&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333&quot;&gt;&amp;gt;&lt;/span&gt; entry &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;Map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;Entry&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;)&lt;/span&gt; iterator&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;next&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;();&lt;/span&gt;
            System&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;format&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Key:%s Value:%s&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; entry&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;getKey&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(),&lt;/span&gt; entry&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;getValue&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;()));&lt;/span&gt;
        &lt;span style=&quot;color: #333333&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #333333&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #333333&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Iterating a Map using for each loop over Map entries&lt;/h2&gt;
&lt;!-- HTML generated using hilite.me --&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;package&lt;/span&gt; main&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;java&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;lessons&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;

&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;java.util.Iterator&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;java.util.Map&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;

&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #BB0066; font-weight: bold&quot;&gt;IterateMapEntries&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;{&lt;/span&gt;

    &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066BB; font-weight: bold&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;...&lt;/span&gt; args&lt;span style=&quot;color: #333333&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;{&lt;/span&gt;
        Map&lt;span style=&quot;color: #333333&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333&quot;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;new&lt;/span&gt; HashMap&lt;span style=&quot;color: #333333&quot;&gt;();&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;California&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Sacramento&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Texas&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Austin&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Florida&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Tallahassee&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Georgia&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Atlanta&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;

    &lt;span style=&quot;color: #888888&quot;&gt;/** Iterating Map using for each loop over Map entries. **/&lt;/span&gt;
        &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;for&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;Map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;Entry&lt;/span&gt; entry &lt;span style=&quot;color: #333333&quot;&gt;:&lt;/span&gt; map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;entrySet&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;())&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;{&lt;/span&gt;
            System&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;format&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Key:%s Value:%s&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; entry&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;getKey&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(),&lt;/span&gt; entry&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;getValue&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;()));&lt;/span&gt;
        &lt;span style=&quot;color: #333333&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #333333&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #333333&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Iterating Map using java 1.8 forEach and lambda constructs&lt;/h2&gt;
&lt;!-- HTML generated using hilite.me --&gt;
&lt;div style=&quot;background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;package&lt;/span&gt; main&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;java&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;lessons&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;

&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;java.util.Iterator&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;
&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;java.util.Map&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;;&lt;/span&gt;

&lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #BB0066; font-weight: bold&quot;&gt;IterateMapEntries&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;{&lt;/span&gt;

    &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #333399; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0066BB; font-weight: bold&quot;&gt;main&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;...&lt;/span&gt; args&lt;span style=&quot;color: #333333&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;{&lt;/span&gt;
        Map&lt;span style=&quot;color: #333333&quot;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; String&lt;span style=&quot;color: #333333&quot;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&quot;color: #333333&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #008800; font-weight: bold&quot;&gt;new&lt;/span&gt; HashMap&lt;span style=&quot;color: #333333&quot;&gt;();&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;California&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Sacramento&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Texas&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Austin&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Florida&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Tallahassee&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;put&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Georgia&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; &lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Atlanta&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;);&lt;/span&gt;

    &lt;span style=&quot;color: #888888&quot;&gt;/** Iterating Map using java 1.8 forEach &amp;amp; lambda constructs. **/&lt;/span&gt;
        map&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;forEach&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;((&lt;/span&gt;k&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; v&lt;span style=&quot;color: #333333&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&quot;color: #333333&quot;&gt;{&lt;/span&gt;
            System&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;println&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;String&lt;span style=&quot;color: #333333&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #0000CC&quot;&gt;format&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;background-color: #fff0f0&quot;&gt;&amp;quot;Key:%s Value:%s&amp;quot;&lt;/span&gt;&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; k&lt;span style=&quot;color: #333333&quot;&gt;,&lt;/span&gt; v&lt;span style=&quot;color: #333333&quot;&gt;));&lt;/span&gt;
        &lt;span style=&quot;color: #333333&quot;&gt;});&lt;/span&gt;
    &lt;span style=&quot;color: #333333&quot;&gt;}&lt;/span&gt;
&lt;span style=&quot;color: #333333&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;I'd highly recommend to start using java 1.8 forEach construct to iterate Map. It is so crisp and clear :)&lt;/p&gt;</content><author><name>vishwambharu@gmail.com</name></author><summary type="html">Iterating a Map using an Iterator

 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23package main.java.lessons;</summary></entry><entry><title type="html">Database Concurrency using MVCC</title><link href="http://0.0.0.0:4000/2016/05/01/database-concurrency-using-mvcc/" rel="alternate" type="text/html" title="Database Concurrency using MVCC" /><published>2016-05-01T12:02:00+00:00</published><updated>2016-05-01T12:02:00+00:00</updated><id>http://0.0.0.0:4000/2016/05/01/database-concurrency-using-mvcc</id><content type="html" xml:base="http://0.0.0.0:4000/2016/05/01/database-concurrency-using-mvcc/">&lt;p&gt;Relational databases support principles of &lt;a href=&quot;https://en.wikipedia.org/wiki/ACID&quot;&gt;ACID model&lt;/a&gt; for reliability and consistency. ACID architectural pattern guarantees that the database transaction executes reliably. &lt;strong&gt;'Isolated'&lt;/strong&gt; principle states that in case of multiple transactions occurring simultaneously, one transaction shouldn’t see the effects of other in-progress transaction.&lt;/p&gt;

&lt;p&gt;Isolation among multiple transactions can be easily achieved with locks. If a session is reading an item, lock can stop another session from modifying the same item and if a session is modifying an item, lock can stop another session from reading the it. It is simple but very costly for a concurrent application. Lock based applications leads to high contention and low concurrency.&lt;/p&gt;

&lt;p&gt;To improve concurrency without too many locks, almost all relation database systems and some NoSQL stores such as HBase, use &lt;em&gt;multi-version concurrency control&lt;/em&gt; (MVCC) architectural pattern&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;What is MVCC and how it helps improve concurrency?&lt;/h2&gt;

&lt;p&gt;MVCC stands for multi-version concurrency control. Whole idea behind MVCC is to improve concurrency of database system by reducing contention and locks.&lt;/p&gt;

&lt;blockquote&gt;Readers shouldn’t block writers and writers shouldn’t block reader. MVCC works towards achieving this goal.&lt;/blockquote&gt;

&lt;p&gt;In MVCC model, database systems keep multiple versions of same data. So, rather than overwriting an existing data, database engine marks the existing data obsolete and adds a newer version. Database systems use either timestamp or some sort of change identifier to adopt versioning of data. So, with versioning at place, database system can construct a snapshot view of database any given point in time. And every session sees it’s own snapshot view of database.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot;&gt;
    &lt;img src=&quot;/img/mvcc.jpg&quot; alt=&quot;MVCC Image&quot; /&gt;
&lt;/a&gt;
&lt;span class=&quot;caption text-muted&quot;&gt;Session 1 and Session 2 are trying to access database field ‘item’.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;
   &lt;p&gt;Session 1 : update operation starts at time t1&lt;/p&gt;
   &lt;p&gt;Session 2 : read operation starts at time t2 (&amp;gt;t1)&lt;/p&gt;
   &lt;p&gt;Session 1 creates another revision of ‘item’, however, Session 2 still reads old revision of ‘item’ as ver:2 was created after Session 1 started.&lt;/p&gt;
&lt;/p&gt;

&lt;h2 class=&quot;section-heading&quot;&gt;Points to be noted ...&lt;/h2&gt;
&lt;p&gt;
&lt;ul type=&quot;disc&quot;&gt;
&lt;li&gt;No in-place edits of data. Since existing data is never edited, there is no reason to apply a lock. This dramatically improves the performance of database systems.&lt;/li&gt;
&lt;li&gt;Versioning system helps to identify latest revision of data easily.&lt;/li&gt;
&lt;li&gt;Old versions are pruned offline based on how many old versions need to be maintained for the application to work correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;</content><author><name>vishwambharu@gmail.com</name></author><summary type="html">Relational databases support principles of ACID model for reliability and consistency. ACID architectural pattern guarantees that the database transaction executes reliably. 'Isolated' principle states that in case of multiple transactions occurring simultaneously, one transaction shouldn’t see the effects of other in-progress transaction.</summary></entry></feed>
